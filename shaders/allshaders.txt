4.6
Pass through

//vertex shader
in vec4 position;
uniform mat4 og_modelViewPerspectiveMatrix;

void main ()
{
gl_Position = og_ModelViewPerspectiveMatrix * position;
}

//frag
out vec3 fragmentColor;
void main() {
fragmentColor = vec3(0,0,0);
}

////////////////////////////////
4.7
Diffuse vertex
in vec4 position;
out vec3 worldPosition;
out vec3 positionToLight;

uniform mat4 og_modelViewPerspectiveMatrix;
uniform vec3 og_cameraLightPosition;

void main()
{
gl_Position = og_modelViewPerspectiveMatrix * position;
worldPosition = position.xyz;
positionToLight = og_cameraLightPosition - worldPosition;
}

//4.8
Diffuse fragment
in vec3 worldPosition;
in vec3 positionToLight;
out vec3 fragmentColor;

void main()
{
vec3 toLight = normalize(positionToLight);
vec3 normal = normalize(worldPosition);
float diffuse = max(dot(toLight,normal),0.0);
fragmentColor = vec3(difuse,diffuse,diffuse)
}

//4.9 phong vertex diffuse+specular
int vec3 position;
out vec3 worldPosition;
out vec3 positionToLight;
out vec3 positionToEye;

uniform mat4 og_modelViewPerspectiveMatrix;
unfirom vec3 og_cameraEye;
uniform vec3 og_cameraLightPosition;

void main()
{
gl_Position = og_modelViewPerspectiveMatrix * position;
worldPosition = position.xyz;
positionToLight = og_cameraLightPosition-worldPosition;
positionToEye = og_cameraEye-worldPosition;
}

///4.10 phong frag

in vec3 worldPosition;
in vec3 positionToLight;
in vec3 positionToEye;
out vec3 fragmentColor;

uniform vec4 og_diffuseSpecularAmbientShininess;

float LightIntensity(vec3 normal, vec3 toLight, vec3 toEye,
vec4 diffuseSpecularAmbientShininess)
{
vec3 toReflectedLight = reflect(-toLight,normal);

float diffuse = max(dot(toLight,normal),0.0);
float specular = max(dot(toReflectedLight,toEye),0.0);
specular = pow(specular,diffuseSpecularAmbientShininess.w);

return (diffuseAmbientShininess.x * diffuse) +
(diffuseSpecularAmbientShininess.y * specular) +
diffuseSpecularAmbientShininess.z;
}

void main()
{
vec3 normal = normalize(worldPosition);
float intensity = LightIntensity(normal,
normalize(positionToLight), normalize(positionToEye),
og_diffuseSpecularAmbientShininess);
fragmentColor = vec3(intensity,intensity,intensity);
}

/////
//globe texture frag 4.11
in vec3 worldPosition;
out vec3 fragmentColor;

uniform sampler2D og_texture0;
uniform vec3 u_globeOneOverRadiiSquared;

vec3 GeodeticSurfaceNormal(vec3 positionOnEllipsoid,
vec3 oneOverEllipsoidRadiiSquared)
{
return normalize(positionOnEllipsoid*oneOverEllipsoidRadiiSquared);
}

vec2 ComputeTextureCoordinate(vec3 normal)
{
return vec2(
atan(normal.y, normal.x)*og_oneOverTwoPi + 0.5,
asin(normal.z)*og_oneOverPi + 0.5);
}

void main()
{
vec3 normal = GeodeticSuefaceNormal(
worldPosition, u_globeOneOverRadiiSquared);
vec2 textureCoordinate = ComputeTextureCoordinates(normal);
fragmentColor = texture(og_texture0, textureCoordinate).rgb;
}
/////

//lat/lon fragment grid shader 4.12 + 4.13
uniform vec2 u_gridLineWidth;
uniform vec2 u_gridResolution;

void main() {
vec3 normal = GeodeticSurfaceNormal(
worldPosition, u_globeOneOverRadiiSquared);
vec2 textureCoordinate = ComputeTextureCoordinates(normal);
vec2 distanceToLine = mod(textureCoordinate, u_gridResolution);
vec2 dx = abs(dFdx(textureCoordinate));
vec2 dy = abs(dFdy(textureCoordinate));
vec2 dF = vec2(max(dx.s,dy.s),max(dx.t,dy.t))*u_gridLineWidth;

if (any(lessThan(distanceToLine, dF)))
{
fragmentColor=vec3(1.0,0.0,0.0);
}
else {
float intensity = LightIntensity(normal,
normalize(positionToLight),
normalize(positionToEye),
og_diffuseSpecularAmbientShininess);
fragmentColor = intensity*
texture(og_teture0,textureCoordinates).rgb;
}


}
////////

//4.18 ellipsoid world space depth (glFragDepth)
float ComputeWorldPositionDepth(vec3 position)
{
vec4 v = og_modelViewPerspectiveMatrix * vec4(position,1);
v.z/=v.w;
v.z=(v.z+1.0)*0.5;
return v.z;
}

/////////


////
http://www.gamedev.net/page/resources/_/technical/graphics-programming-and-theory/a-simple-and-practical-approach-to-ssao-r2753
//SSAO shader

sampler g_buffer_norm;
sampler g_buffer_pos;
sampler g_random;
float random_size;
float g_sample_rad;
float g_intensity;
float g_scale;
float g_bias;

struct PS_INPUT
{
float2 uv : TEXCOORD0;
};

struct PS_OUTPUT
{
float4 color : COLOR0;
};

float3 getPosition(in float2 uv)
{
return tex2D(g_buffer_pos,uv).xyz;
}

float3 getNormal(in float2 uv)
{
return normalize(tex2D(g_buffer_norm, uv).xyz * 2.0f - 1.0f);
}

float2 getRandom(in float2 uv)
{
return normalize(tex2D(g_random, g_screen_size * uv / random_size).xy * 2.0f - 1.0f);
}

float doAmbientOcclusion(in float2 tcoord,in float2 uv, in float3 p, in float3 cnorm)
{
float3 diff = getPosition(tcoord + uv) - p;
const float3 v = normalize(diff);
const float d = length(diff)*g_scale;
return max(0.0,dot(cnorm,v)-g_bias)*(1.0/(1.0+d))*g_intensity;
}

PS_OUTPUT main(PS_INPUT i)
{
PS_OUTPUT o = (PS_OUTPUT)0;

o.color.rgb = 1.0f;
const float2 vec[4] = {float2(1,0),float2(-1,0),
			float2(0,1),float2(0,-1)};

float3 p = getPosition(i.uv);
float3 n = getNormal(i.uv);
float2 rand = getRandom(i.uv);

float ao = 0.0f;
float rad = g_sample_rad/p.z;

//**SSAO Calculation**//
int iterations = 4;
for (int j = 0; j < iterations; ++j)
{
  float2 coord1 = reflect(vec[j],rand)*rad;
  float2 coord2 = float2(coord1.x*0.707 - coord1.y*0.707,
			  coord1.x*0.707 + coord1.y*0.707);
  
  ao += doAmbientOcclusion(i.uv,coord1*0.25, p, n);
  ao += doAmbientOcclusion(i.uv,coord2*0.5, p, n);
  ao += doAmbientOcclusion(i.uv,coord1*0.75, p, n);
  ao += doAmbientOcclusion(i.uv,coord2, p, n);
}
ao/=(float)iterations*4.0;
//**END**//

//Do stuff here with your occlusion value Ã¢aoÃ¢: modulate ambient lighting, write it to a buffer for later //use, etc.
return o;
}

//////////////////////

tilt shift
https://gist.github.com/underscorediscovery/10324388

// Modified version of a tilt shift shader from Martin Jonasson (http://grapefrukt.com/)
// Read http://notes.underscorediscovery.com/ for context on shaders and this file
// License : MIT
 
uniform sampler2D tex0;
varying vec2 tcoord;
varying vec4 color;
 
    /*
        Take note that blurring in a single pass (the two for loops below) is more expensive than separating
        the x and the y blur into different passes. This was used where bleeding edge performance
        was not crucial and is to illustrate a point. 
 
        The reason two passes is cheaper? 
           texture2D is a fairly high cost call, sampling a texture.
 
           So, in a single pass, like below, there are 3 steps, per x and y. 
 
           That means a total of 9 "taps", it touches the texture to sample 9 times.
 
           Now imagine we apply this to some geometry, that is equal to 16 pixels on screen (tiny)
           (16 * 16) * 9 = 2304 samples taken, for width * height number of pixels, * 9 taps
           Now, if you split them up, it becomes 3 for x, and 3 for y, a total of 6 taps
           (16 * 16) * 6 = 1536 samples
    
           That's on a *tiny* sprite, let's scale that up to 128x128 sprite...
           (128 * 128) * 9 = 147,456
           (128 * 128) * 6 =  98,304
 
           That's 33.33..% cheaper for splitting them up.
           That's with 3 steps, with higher steps (more taps per pass...)
 
           A really smooth, 6 steps, 6*6 = 36 taps for one pass, 12 taps for two pass
           You will notice, the curve is not linear, at 12 steps it's 144 vs 24 taps
           It becomes orders of magnitude slower to do single pass!
           Therefore, you split them up into two passes, one for x, one for y.
    */
 
    //I am hardcoding the constants like a jerk
    
const float bluramount  = 1.0;
const float center      = 1.1;
const float stepSize    = 0.004;
const float steps       = 3.0;
 
const float minOffs     = (float(steps-1.0)) / -2.0;
const float maxOffs     = (float(steps-1.0)) / +2.0;
 
void main() {
 
    float amount;
    vec4 blurred;
        
        //Work out how much to blur based on the mid point 
    amount = pow((tcoord.y * center) * 2.0 - 1.0, 2.0) * bluramount;
        
        //This is the accumulation of color from the surrounding pixels in the texture
    blurred = vec4(0.0, 0.0, 0.0, 1.0);
        
        //From minimum offset to maximum offset
    for (float offsX = minOffs; offsX <= maxOffs; ++offsX) {
        for (float offsY = minOffs; offsY <= maxOffs; ++offsY) {
 
                //copy the coord so we can mess with it
            vec2 temp_tcoord = tcoord.xy;
 
                //work out which uv we want to sample now
            temp_tcoord.x += offsX * amount * stepSize;
            temp_tcoord.y += offsY * amount * stepSize;
 
                //accumulate the sample 
            blurred += texture2D(tex0, temp_tcoord);
        
        } //for y
    } //for x 
        
        //because we are doing an average, we divide by the amount (x AND y, hence steps * steps)
    blurred /= float(steps * steps);
 
        //return the final blurred color
    gl_FragColor = blurred;
 
} //main 



